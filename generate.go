// +build ignore

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"
)

const source = `//
// This file is automatically generated by generate.go -- Do not edit!
//
package main

import (
IMPORTS
)

`

func makeImports(dirs []string) string {
	imports := []string{}

	for _, dir := range dirs {
		imports = append(imports, fmt.Sprintf("\t_ \"github.com/vtolstov/qemu-ga/%s\"\n", dir))
	}

	// Make things pretty
	sort.Strings(imports)

	return strings.Join(imports, "")
}

// listDirectories recursively lists directories under the specified path
func listDirectories(path string) ([]string, error) {
	names := []string{}
	items, err := ioutil.ReadDir(path)
	if err != nil {
		return names, err
	}

	for _, item := range items {
		// We only want directories
		if item.IsDir() {
			currentDir := filepath.Join(path, item.Name())
			names = append(names, currentDir)

			// Do some recursion
			subNames, err := listDirectories(currentDir)
			if err == nil {
				names = append(names, subNames...)
			}
		}
	}

	return names, nil
}

func main() {
	imports, err := listDirectories("command/")
	if err != nil {
		log.Fatalf("Failed to list commands: %s", err)
	}

	output := source
	output = strings.Replace(output, "IMPORTS", makeImports(imports), 1)

	file, err := os.Create("commands.go")
	defer file.Close()
	if err != nil {
		log.Fatalf("Failed to write: %s", err)
	}

	_, err = file.WriteString(output)
	if err != nil {
		log.Fatalf("Failed writing: %s", err)
	}

}
